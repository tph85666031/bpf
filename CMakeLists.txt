#CMAKE最小版本要求,可修改
#BUILD_TYPE=Release,Debug  UNIT_TEST=true,false
CMAKE_MINIMUM_REQUIRED(VERSION 2.9)

PROJECT("bpf")
SET(BPF_MAJOR_VERSION 1)
SET(BPF_MINOR_VERSION 0)
SET(BPF_PATCH_VERSION 0)

IF ("${UNIT_TEST}" STREQUAL "true")
  ADD_DEFINITIONS("-DUNIT_TEST")
ENDIF()

IF ("${BUILD_TYPE}" STREQUAL "Debug")
  ADD_DEFINITIONS("-D__DEBUG__")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MDd)
  ELSE()
    SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -g")
    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
  ENDIF()
ELSE()
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -O2")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -O2")
  IF (MSVC)
    ADD_COMPILE_OPTIONS( /MD)
  ENDIF()
ENDIF()

#-Woverloaded-virtual
#C/C++文件编译选项,无需修改
SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -Wall -std=c99 -fwrapv")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wall")

IF (UNIX OR APPLE)
  SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -fPIC -Wno-unused-result")
  SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -fPIC -std=c++11 -Wno-unused-result")
ENDIF()

#头文件搜索路径,可修改
INCLUDE_DIRECTORIES(
    ${PROJECT_SOURCE_DIR}/include/
	${PROJECT_SOURCE_DIR}/out/include/
	${PROJECT_SOURCE_DIR}/src/frontend
)

#库文件搜索路径,可修改
LINK_DIRECTORIES(
	${PROJECT_SOURCE_DIR}
	${PROJECT_SOURCE_DIR}/out/lib
)

#依赖库,无需修改
IF (UNIX OR APPLE)
  SET(PROJECT_LIB
  	  ${PROJECT_LIB}
	  libbpf.a
	  libelf.a
	  libz.a
      pthread
      dl
      m
)
ELSE()
  ADD_COMPILE_OPTIONS( /W3 /wd4819 /wd4251 /wd4200)
  SET(PROJECT_LIB
      ${PROJECT_LIB}
      msvcrt.lib
  )
ENDIF()

SET(CMAKE_C_FLAGS "${CMAKE_C_FLAGS}")
SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")

AUX_SOURCE_DIRECTORY(src/frontend PROJECT_SRC)
IF ("${UNIT_TEST}" STREQUAL "true")
 AUX_SOURCE_DIRECTORY(src/frontend/test PROJECT_SRC)
ENDIF()

SET(CMAKE_SKIP_BUILD_RPATH TRUE)
SET(CMAKE_BUILD_WITH_INSTALL_RPATH FALSE)

SET(CPACK_GENERATOR TGZ)
SET(CMAKE_INSTALL_PREFIX ${PROJECT_SOURCE_DIR}/out)
SET(CMAKE_INSTALL_CONFIG_NAME ${CMAKE_BUILD_TYPE})
SET(CPACK_PACKAGE_VERSION ${BPF_MAJOR_VERSION}.${BPF_MINOR_VERSION}.${BPF_PATCH_VERSION})
SET(CPACK_PACKAGE_VERSION_MAJOR ${BPF_MAJOR_VERSION})
SET(CPACK_PACKAGE_VERSION_MINOR ${BPF_MINOR_VERSION})
SET(CPACK_PACKAGE_VERSION_PATCH ${BPF_PATCH_VERSION})
SET(CPACK_PACKAGE_FILE_NAME ${CMAKE_PROJECT_NAME}_${CPACK_PACKAGE_VERSION}_${OS_TYPE}_${BUILD_ARCH}_${BUILD_TYPE})
SET(CPACK_PACKAGE_DIRECTORY ${PROJECT_SOURCE_DIR}/out)
SET(CPACK_INCLUDE_TOPLEVEL_DIRECTORY 0)
SET(CPACK_ARCHIVE_THREADS 0)
INCLUDE(CPack)

#无需改动
IF (MSVC)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_LIBRARY_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_DEBUG   ${PROJECT_SOURCE_DIR}/out)
  SET(CMAKE_ARCHIVE_OUTPUT_DIRECTORY_RELEASE ${PROJECT_SOURCE_DIR}/out)
ENDIF()

IF (UNIX OR APPLE)
  SET(LIBRARY_OUTPUT_PATH ${PROJECT_SOURCE_DIR}/out)
ENDIF()

ADD_EXECUTABLE(${PROJECT_NAME} ${PROJECT_SRC})
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION bin COMPONENT dev)
TARGET_LINK_LIBRARIES(${PROJECT_NAME} ${PROJECT_LIB})
